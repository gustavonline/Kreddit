<!-- 
Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
See how the links are made in 'PostList.razor'.
-->
@page "/post/{id}"


@using Kreddit.client.Services
@using Kreddit.shared.Models
@inject PostService PostService

<PageTitle>Kreddit</PageTitle>

<style>
div.contents {
  background-color: #f2f0eb;
  width: 600px;
  border: 2px solid #452d3d;
  padding: 10px;
  margin-top: 20px;
}
</style>

@if (Post == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="contents">
        <h4>@Post.Title</h4>
    <p>Posted by @Post.User.Username</p>
        <p>@Post.Content</p>
    </div>

    <div class="contents">
        <h4>Comments</h4>
        <table>
            <tr>
                <th>User</th>
                <th>Comment</th>
                <th colspan="3">Votes</th>
            </tr>
            @foreach (var comment in Post.Comments)
            {
                <tr>
                    <td>@comment.User.Username</td>
                    <td>@comment.Title</td>
                    <td>@(comment.Upvotes - comment.Downvotes)</td>
                    <td><button @onclick="() => Upvote(comment.Id)">Upvote</button></td>
                    <td><button @onclick="() => Downvote(comment.Id)">Downvote</button></td>
                </tr>
            }
        </table>
    </div>

    <!-- This demonstrates how to pass in PostId to the component 'CreateComment'. See how 
    it is used in the file CreateComment.razor -->
    <CreateComment PostId=@PostId></CreateComment>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int PostId { get { return int.Parse(Id); } }
    public Post Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await PostService.GetPost(PostId);
    }
    private async void Upvote(int id)
    {
        Console.WriteLine("Not implemented ðŸ˜ª");
    }

    private async void Downvote(int id)
    {
        Console.WriteLine("Not implemented ðŸ˜ª");
    }
}