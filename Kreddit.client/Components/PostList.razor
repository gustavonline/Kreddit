@inherits LayoutComponentBase

@using Kreddit.shared.Models;
@inject PostService PostService

@using Microsoft.Extensions.Configuration
@using Kreddit.client.Services
@inject IConfiguration Configuration

@if (posts == null)
{
    <p class="loading-text"><em>Loading...</em></p>
}
else
{
    <table class="post-table">
        <thead>
            <tr>
                <th class="post-title-header">Title</th>
                <th class="post-content-header">Content</th>
                <th class="post-date-header">Created at</th>
                <th class="post-votes-header" colspan="3">Votes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in posts)
            {
                <tr class="post-row">
                    <td class="post-title"><a class="post-link" href="/post/@post.Id">@post.Title</a></td>
                    <td class="post-content">@post.Content</td>
                    <td class="post-date">@post.CreatedAt</td>
                    <td class="post-vote-count">Upvotes: @post.Upvotes - Downvotes: @post.Downvotes</td>
                    <td class="post-upvote-btn"><button class="vote-btn upvote-btn" @onclick="() => Upvote(post.Id)">Upvote</button></td>
                    <td class="post-downvote-btn"><button class="vote-btn downvote-btn" @onclick="() => Downvote(post.Id)">Downvote</button></td>
                </tr>
            }
        </tbody>
    </table>
    <br/>
}

@code {
    private Post[]? posts;
    private Post? votePost;

    protected override async Task OnInitializedAsync()
    {
        posts = await PostService.GetPosts();
    }

    private async void Upvote(int id)
    {
        var updatedPost = await PostService.UpvotePost(id);
    }

    private async void Downvote(int id)
    {
        var updatedPost = await PostService.DownvotePost(id);
    }
}
